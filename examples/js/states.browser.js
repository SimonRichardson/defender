// Generated by CommonJS Everywhere 0.9.4
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  require.define('/states.js', function (module, exports, __dirname, __filename) {
    var State = require('/../../node_modules/fantasy-states/state.js', module);
    exports = module.exports = State;
  });
  require.define('/../../node_modules/fantasy-states/state.js', function (module, exports, __dirname, __filename) {
    var Tuple2 = require('/../../node_modules/fantasy-tuples/tuples.js', module).Tuple2, daggy = require('/../../node_modules/fantasy-states/node_modules/daggy/daggy.js', module), State = daggy.tagged('run');
    State.of = function (a) {
      return State(function (b) {
        return Tuple2(a, b);
      });
    };
    State.prototype.chain = function (f) {
      var state = this;
      return State(function (s) {
        var result = state.run(s);
        return f(result._1).run(result._2);
      });
    };
    State.get = State(function (s) {
      return Tuple2(s, s);
    });
    State.modify = function (f) {
      return State(function (s) {
        return Tuple2(null, f(s));
      });
    };
    State.put = function (s) {
      return State.modify(function (a) {
        return s;
      });
    };
    State.prototype.evalState = function (s) {
      return this.run(s)._1;
    };
    State.prototype.exec = function (s) {
      return this.run(s)._2;
    };
    State.prototype.map = function (f) {
      return this.chain(function (a) {
        return State.of(f(a));
      });
    };
    State.prototype.ap = function (a) {
      return this.chain(function (f) {
        return a.map(f);
      });
    };
    State.StateT = function (M) {
      var StateT = daggy.tagged('run');
      StateT.lift = function (m) {
        return StateT(function (b) {
          return m.map(function (c) {
            return Tuple2(c, b);
          });
        });
      };
      StateT.of = function (a) {
        return StateT(function (b) {
          return M.of(Tuple2(a, b));
        });
      };
      StateT.prototype.chain = function (f) {
        var state = this;
        return StateT(function (s) {
          var result = state.run(s);
          return result.chain(function (t) {
            return f(t._1).run(t._2);
          });
        });
      };
      StateT.get = StateT(function (s) {
        return M.of(Tuple2(s, s));
      });
      StateT.modify = function (f) {
        return StateT(function (s) {
          return M.of(Tuple2(null, f(s)));
        });
      };
      StateT.put = function (s) {
        return StateT.modify(function (a) {
          return s;
        });
      };
      StateT.prototype.evalState = function (s) {
        return this.run(s).map(function (t) {
          return t._1;
        });
      };
      StateT.prototype.exec = function (s) {
        return this.run(s).map(function (t) {
          return t._2;
        });
      };
      StateT.prototype.map = function (f) {
        return this.chain(function (a) {
          return StateT.of(f(a));
        });
      };
      StateT.prototype.ap = function (a) {
        return this.chain(function (f) {
          return a.map(f);
        });
      };
      return StateT;
    };
    if (typeof module != 'undefined')
      module.exports = State;
  });
  require.define('/../../node_modules/fantasy-states/node_modules/daggy/daggy.js', function (module, exports, __dirname, __filename) {
    (function (global, factory) {
      'use strict';
      if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
      } else if (typeof exports !== 'undefined') {
        factory(exports);
      } else {
        global.daggy = {};
        factory(global.daggy);
      }
    }(this, function (exports) {
      function create(proto) {
        function Ctor() {
        }
        Ctor.prototype = proto;
        return new Ctor;
      }
      exports.create = create;
      function getInstance(self, constructor) {
        return self instanceof constructor ? self : create(constructor.prototype);
      }
      exports.getInstance = getInstance;
      function tagged() {
        var fields = [].slice.apply(arguments);
        function wrapped() {
          var self = getInstance(this, wrapped), i;
          if (arguments.length != fields.length)
            throw new TypeError('Expected ' + fields.length + ' arguments, got ' + arguments.length);
          for (i = 0; i < fields.length; i++)
            self[fields[i]] = arguments[i];
          return self;
        }
        wrapped._length = fields.length;
        return wrapped;
      }
      exports.tagged = tagged;
      function taggedSum(constructors) {
        var key;
        function definitions() {
          throw new TypeError('Tagged sum was called instead of one of its properties.');
        }
        function makeCata(key) {
          return function (dispatches) {
            var fields = constructors[key], args = [], i;
            if (!dispatches[key])
              throw new TypeError("Constructors given to cata didn't include: " + key);
            for (i = 0; i < fields.length; i++)
              args.push(this[fields[i]]);
            return dispatches[key].apply(this, args);
          };
        }
        function makeProto(key) {
          var proto = create(definitions.prototype);
          proto.cata = makeCata(key);
          return proto;
        }
        for (key in constructors) {
          if (!constructors[key].length) {
            definitions[key] = makeProto(key);
            continue;
          }
          definitions[key] = tagged.apply(null, constructors[key]);
          definitions[key].prototype = makeProto(key);
        }
        return definitions;
      }
      exports.taggedSum = taggedSum;
    }));
  });
  require.define('/../../node_modules/fantasy-tuples/tuples.js', function (module, exports, __dirname, __filename) {
    var daggy = require('/../../node_modules/fantasy-tuples/node_modules/daggy/daggy.js', module), Tuple2 = daggy.tagged('_1', '_2'), Tuple3 = daggy.tagged('_1', '_2', '_3'), Tuple4 = daggy.tagged('_1', '_2', '_3', '_4'), Tuple5 = daggy.tagged('_1', '_2', '_3', '_4', '_5');
    Tuple2.prototype.concat = function (b) {
      return Tuple2(this._1.concat(b._1), this._2.concat(b._2));
    };
    Tuple3.prototype.concat = function (b) {
      return Tuple3(this._1.concat(b._1), this._2.concat(b._2), this._3.concat(b._3));
    };
    Tuple4.prototype.concat = function (b) {
      return Tuple4(this._1.concat(b._1), this._2.concat(b._2), this._3.concat(b._3), this._4.concat(b._4));
    };
    Tuple5.prototype.concat = function (b) {
      return Tuple5(this._1.concat(b._1), this._2.concat(b._2), this._3.concat(b._3), this._4.concat(b._4), this._5.concat(b._5));
    };
    if (typeof exports != 'undefined') {
      exports.Tuple2 = Tuple2;
      exports.Tuple3 = Tuple3;
      exports.Tuple4 = Tuple4;
      exports.Tuple5 = Tuple5;
    }
  });
  require.define('/../../node_modules/fantasy-tuples/node_modules/daggy/daggy.js', function (module, exports, __dirname, __filename) {
    (function (global, factory) {
      'use strict';
      if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
      } else if (typeof exports !== 'undefined') {
        factory(exports);
      } else {
        global.daggy = {};
        factory(global.daggy);
      }
    }(this, function (exports) {
      function create(proto) {
        function Ctor() {
        }
        Ctor.prototype = proto;
        return new Ctor;
      }
      exports.create = create;
      function getInstance(self, constructor) {
        return self instanceof constructor ? self : create(constructor.prototype);
      }
      exports.getInstance = getInstance;
      function tagged() {
        var fields = [].slice.apply(arguments);
        function wrapped() {
          var self = getInstance(this, wrapped), i;
          if (arguments.length != fields.length)
            throw new TypeError('Expected ' + fields.length + ' arguments, got ' + arguments.length);
          for (i = 0; i < fields.length; i++)
            self[fields[i]] = arguments[i];
          return self;
        }
        wrapped._length = fields.length;
        return wrapped;
      }
      exports.tagged = tagged;
      function taggedSum(constructors) {
        var key;
        function definitions() {
          throw new TypeError('Tagged sum was called instead of one of its properties.');
        }
        function makeCata(key) {
          return function (dispatches) {
            var fields = constructors[key], args = [], i;
            if (!dispatches[key])
              throw new TypeError("Constructors given to cata didn't include: " + key);
            for (i = 0; i < fields.length; i++)
              args.push(this[fields[i]]);
            return dispatches[key].apply(this, args);
          };
        }
        function makeProto(key) {
          var proto = create(definitions.prototype);
          proto.cata = makeCata(key);
          return proto;
        }
        for (key in constructors) {
          if (!constructors[key].length) {
            definitions[key] = makeProto(key);
            continue;
          }
          definitions[key] = tagged.apply(null, constructors[key]);
          definitions[key].prototype = makeProto(key);
        }
        return definitions;
      }
      exports.taggedSum = taggedSum;
    }));
  });
  global.State = require('/states.js');
}.call(this, this));
